// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: app/order/cmd/rpc/pb/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateHomestayOrder_FullMethodName           = "/pb.OrderService/CreateHomestayOrder"
	OrderService_HomestayOrderDetail_FullMethodName           = "/pb.OrderService/HomestayOrderDetail"
	OrderService_UpdateHomestayOrderTradeState_FullMethodName = "/pb.OrderService/UpdateHomestayOrderTradeState"
	OrderService_UserHomestayOrderList_FullMethodName         = "/pb.OrderService/UserHomestayOrderList"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// create homestay order
	CreateHomestayOrder(ctx context.Context, in *CreateHomestayOrderRequest, opts ...grpc.CallOption) (*CreateHomestayOrderResponse, error)
	// homestay order detail
	HomestayOrderDetail(ctx context.Context, in *HomestayOrderDetailRequest, opts ...grpc.CallOption) (*HomestayOrderDetailResponse, error)
	// update homestay order trade state
	UpdateHomestayOrderTradeState(ctx context.Context, in *UpdateHomestayOrderTradeStateRequest, opts ...grpc.CallOption) (*UpdateHomestayOrderTradeStateResponse, error)
	// user homestay order list
	UserHomestayOrderList(ctx context.Context, in *UserHomestayOrderListRequest, opts ...grpc.CallOption) (*UserHomestayOrderListResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateHomestayOrder(ctx context.Context, in *CreateHomestayOrderRequest, opts ...grpc.CallOption) (*CreateHomestayOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHomestayOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateHomestayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) HomestayOrderDetail(ctx context.Context, in *HomestayOrderDetailRequest, opts ...grpc.CallOption) (*HomestayOrderDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayOrderDetailResponse)
	err := c.cc.Invoke(ctx, OrderService_HomestayOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateHomestayOrderTradeState(ctx context.Context, in *UpdateHomestayOrderTradeStateRequest, opts ...grpc.CallOption) (*UpdateHomestayOrderTradeStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHomestayOrderTradeStateResponse)
	err := c.cc.Invoke(ctx, OrderService_UpdateHomestayOrderTradeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UserHomestayOrderList(ctx context.Context, in *UserHomestayOrderListRequest, opts ...grpc.CallOption) (*UserHomestayOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserHomestayOrderListResponse)
	err := c.cc.Invoke(ctx, OrderService_UserHomestayOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	// create homestay order
	CreateHomestayOrder(context.Context, *CreateHomestayOrderRequest) (*CreateHomestayOrderResponse, error)
	// homestay order detail
	HomestayOrderDetail(context.Context, *HomestayOrderDetailRequest) (*HomestayOrderDetailResponse, error)
	// update homestay order trade state
	UpdateHomestayOrderTradeState(context.Context, *UpdateHomestayOrderTradeStateRequest) (*UpdateHomestayOrderTradeStateResponse, error)
	// user homestay order list
	UserHomestayOrderList(context.Context, *UserHomestayOrderListRequest) (*UserHomestayOrderListResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateHomestayOrder(context.Context, *CreateHomestayOrderRequest) (*CreateHomestayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHomestayOrder not implemented")
}
func (UnimplementedOrderServiceServer) HomestayOrderDetail(context.Context, *HomestayOrderDetailRequest) (*HomestayOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomestayOrderDetail not implemented")
}
func (UnimplementedOrderServiceServer) UpdateHomestayOrderTradeState(context.Context, *UpdateHomestayOrderTradeStateRequest) (*UpdateHomestayOrderTradeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestayOrderTradeState not implemented")
}
func (UnimplementedOrderServiceServer) UserHomestayOrderList(context.Context, *UserHomestayOrderListRequest) (*UserHomestayOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomestayOrderList not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateHomestayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHomestayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateHomestayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateHomestayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateHomestayOrder(ctx, req.(*CreateHomestayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_HomestayOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomestayOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).HomestayOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_HomestayOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).HomestayOrderDetail(ctx, req.(*HomestayOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateHomestayOrderTradeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestayOrderTradeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateHomestayOrderTradeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateHomestayOrderTradeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateHomestayOrderTradeState(ctx, req.(*UpdateHomestayOrderTradeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UserHomestayOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHomestayOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UserHomestayOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UserHomestayOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UserHomestayOrderList(ctx, req.(*UserHomestayOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHomestayOrder",
			Handler:    _OrderService_CreateHomestayOrder_Handler,
		},
		{
			MethodName: "HomestayOrderDetail",
			Handler:    _OrderService_HomestayOrderDetail_Handler,
		},
		{
			MethodName: "UpdateHomestayOrderTradeState",
			Handler:    _OrderService_UpdateHomestayOrderTradeState_Handler,
		},
		{
			MethodName: "UserHomestayOrderList",
			Handler:    _OrderService_UserHomestayOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/order/cmd/rpc/pb/order.proto",
}
